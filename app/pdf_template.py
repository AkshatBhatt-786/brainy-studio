from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.utils import ImageReader
from utils import getPath
from textwrap import wrap

class GeneratePDF:
    def __init__(self, title, subject_details, instructions, questions, enrollment_no, logo_path, include_header=True, include_footer=True, show_answers=False):
        self.title = title
        self.subject_details = subject_details
        if isinstance(instructions, list):
            self.instructions = "\n".join(instructions)
        else:
            self.instructions = instructions.strip()
        self.questions = questions
        self.enrollment_no = enrollment_no
        self.logo_path = logo_path
        self.include_header = include_header
        self.include_footer = include_footer
        self.show_answers = show_answers

    def add_footer(self, pdf, page_num, width):
        if not self.include_footer:
            return
        pdf.setLineWidth(1)
        pdf.setStrokeColor(colors.HexColor("#C1C1C1"))
        pdf.line(50, 40, width - 50, 40)

        pdf.setFont("Helvetica", 10)
        pdf.setFillColor(colors.HexColor("#4A4A4A"))
        pdf.drawString(50, 25, f"Page {page_num}")
        pdf.drawRightString(width - 100, 25, "Generated by Brainy Studio")

        if self.logo_path:
            logo = ImageReader(self.logo_path)
            pdf.drawImage(logo, width - 90, 10, width=30, height=30, mask='auto')

    def generate_pdf(self, file_path):
        pdf = canvas.Canvas(file_path, pagesize=A4)
        width, height = A4
        page_num = 1
        y_position = height - 100
        max_y = 50
        question_number = 1
        question_gap = 7
        option_gap = 3
        max_option_width = width - 200
        marks_x_position = width - 50
        
        if self.include_header:
            pdf.setFont("Helvetica-Bold", 24)
            pdf.setFillColor(colors.HexColor("#2E3B55"))
            pdf.drawCentredString(width / 2, height - 50, self.title)
            pdf.setFont("Helvetica-Bold", 12)
            pdf.drawString(50, height - 110, f"Subject Code: {self.subject_details['subject_code']}")
            pdf.drawString(width - 250, height - 110, f"Date: {self.subject_details['subject_date']}")
            pdf.drawString(50, height - 130, f"Subject Name: {self.subject_details['subject_name']}")
            pdf.drawString(50, height - 150, f"Time Duration: {self.subject_details['time_duration']}")
            pdf.drawString(width - 250, height - 150, f"Total Marks: {self.subject_details['total_marks']}")
            pdf.line(50, height - 160, width - 50, height - 160)
            y_position -= 80

        for question in self.questions:
            pdf.setFillColor(colors.HexColor("#000000"))
            wrapped_question = wrap(question['text'], width=85)
            options_list = question.get('options', [])
            total_height = len(wrapped_question) * 15 + (len(options_list) * (12 + option_gap)) + 10

            if y_position - total_height < max_y:
                self.add_footer(pdf, page_num, width)
                pdf.showPage()
                page_num += 1
                y_position = height - 80

            pdf.setFont("Helvetica-Bold", 12)
            pdf.drawString(50, y_position, f"{question_number}. {wrapped_question[0]}")
            y_offset = 15
            for line in wrapped_question[1:]:
                pdf.drawString(60, y_position - y_offset, line)
                y_offset += 15
            y_position -= y_offset
            pdf.setFont("Helvetica", 11)
            pdf.drawString(marks_x_position, y_position, f"{question['marks']}")
            y_position -= question_gap

            if options_list:
                option_widths = [pdf.stringWidth(opt, "Helvetica", 11) for opt in options_list]
                total_option_width = sum(option_widths) + (len(options_list) - 1) * 15
                
                if total_option_width <= max_option_width:
                    x_pos = 70
                    for option in options_list:
                        pdf.circle(x_pos - 10, y_position + 2, 4)
                        if self.show_answers and 'correct' in question and option == question['correct']:
                            pdf.setFillColor(colors.HexColor("#333333"))
                            pdf.circle(x_pos - 10, y_position + 2, 3, stroke=0, fill=1)
                            pdf.setFillColor(colors.HexColor("#000000"))
                        pdf.drawString(x_pos, y_position, option)
                        x_pos += pdf.stringWidth(option, "Helvetica", 11) + 20
                    y_position -= 20
                else:
                    for option in options_list:
                        pdf.circle(70, y_position, 4)
                        if self.show_answers and 'correct' in question and option == question['correct']:
                            pdf.setFillColor(colors.HexColor("#333333"))
                            pdf.circle(70, y_position, 3, stroke=0, fill=1)
                            pdf.setFillColor(colors.HexColor("#000000"))
                        pdf.drawString(90, y_position - 4, option)
                        y_position -= (12 + option_gap)
            
            if question['type'] in ['One Word', 'True/False'] and self.show_answers and 'correct' in question:
                pdf.setFont("Helvetica-Oblique", 11)
                pdf.drawString(50, y_position, f"Answer: {question.get('correct', 'N/A')}")
                y_position -= 15
            
            y_position -= question_gap
            question_number += 1
        
        self.add_footer(pdf, page_num, width)
        pdf.save()