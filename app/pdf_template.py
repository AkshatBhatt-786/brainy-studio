from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.utils import ImageReader
from utils import getPath
from textwrap import wrap

class GeneratePDF:
    def __init__(self, title, subject_details, instructions, questions, enrollment_no, logo_path, include_header=True, include_footer=True, show_answers=False):
        self.title = title
        self.subject_details = subject_details
        self.instructions = subject_details.get('instructions', "")
        self.questions = questions
        self.enrollment_no = enrollment_no
        self.logo_path = logo_path
        self.include_header = include_header
        self.include_footer = include_footer
        self.show_answers = show_answers

    def add_footer(self, pdf, page_num, width):
        if not self.include_footer:
            return
        pdf.setLineWidth(1)
        pdf.setStrokeColor(colors.HexColor("#C1C1C1"))
        pdf.line(50, 40, width - 50, 40)

        pdf.setFont("Helvetica", 10)
        pdf.setFillColor(colors.HexColor("#4A4A4A"))
        pdf.drawString(50, 25, f"Page {page_num}")
        pdf.drawRightString(width - 100, 25, "Generated by Brainy Studio")

        if self.logo_path:
            logo = ImageReader(self.logo_path)
            pdf.drawImage(logo, width - 90, 10, width=30, height=30, mask='auto')

    def generate_pdf(self, file_path):
        pdf = canvas.Canvas(file_path, pagesize=A4)
        width, height = A4
        page_num = 1
        page_height = height - 150
        used_height = 0
        default_questions_per_page = 4

        if self.include_header:
            pdf.setFont("Helvetica-Bold", 24)
            pdf.setFillColor(colors.HexColor("#2E3B55"))
            pdf.drawCentredString(width / 2, height - 50, self.title)
            pdf.setFont("Helvetica-Bold", 12)
            pdf.drawString(50, height - 110, f"Subject Code: {self.subject_details['subject_code']}")
            pdf.drawString(width - 250, height - 110, f"Date: {self.subject_details['subject_date']}")
            pdf.drawString(50, height - 130, f"Subject Name: {self.subject_details['subject_name']}")
            pdf.drawString(50, height - 150, f"Time Duration: {self.subject_details['time_duration']}")
            pdf.drawString(width - 250, height - 150, f"Total Marks: {self.subject_details['total_marks']}")
            pdf.setLineWidth(2)
            pdf.line(50, height - 160, width - 50, height - 160)

        y_position = height - 180
        pdf.setFont("Helvetica-Bold", 12)
        pdf.drawString(50, y_position, "Instructions:")
        y_position -= 15
        pdf.setFont("Helvetica", 10)
        for line in self.instructions.splitlines():
            pdf.drawString(50, y_position, line)
            y_position -= 15


        y_position -= 10
        pdf.setLineWidth(1)
        pdf.line(50, y_position, width - 50, y_position)
        y_position -= 20
        question_count = 0

        for question in self.questions:
            wrapped_question = wrap(question['text'], width=85)
            options_list = question.get('options', [])
            question_height = len(wrapped_question) * 15
            options_height = len(options_list) * 25 if options_list else 20
            total_height = question_height + options_height + 40

            if question_count >= default_questions_per_page and used_height + total_height > page_height:
                self.add_footer(pdf, page_num, width)
                pdf.showPage()
                page_num += 1
                y_position = height - 120
                used_height = 0
                question_count = 0

            if used_height + total_height > page_height - 50:
                self.add_footer(pdf, page_num, width)
                pdf.showPage()
                page_num += 1
                y_position = height - 120
                used_height = 0
                question_count = 0

            pdf.setFont("Helvetica-Bold", 12)
            y_offset = 0
            for line in wrapped_question:
                pdf.drawString(50, y_position - y_offset, line)
                y_offset += 15
            y_position -= y_offset
            pdf.drawRightString(width - 50, y_position, f"Marks: {question['marks']}")

            pdf.setFont("Helvetica", 11)
            option_y = y_position - 25

            if options_list:
                for option in options_list:
                    pdf.circle(70, option_y, 4)
                    if self.show_answers and 'correct' in question and option == question['correct']:
                        pdf.setFillColor(colors.HexColor("#333333"))
                        pdf.circle(70, option_y, 3, stroke=0, fill=1)
                        pdf.setFillColor(colors.HexColor("#000000"))
                    pdf.drawString(90, option_y - 4, option)
                    option_y -= 25
            elif question['type'] in ['One Word', 'True/False']:
                pdf.setFont("Helvetica-Oblique", 11)
                pdf.drawString(50, option_y, f"Answer: {question.get('correct', 'N/A')}")
                option_y -= 20
                pdf.setFont("Helvetica", 11)

            y_position = option_y - 20
            used_height += total_height
            question_count += 1

        self.add_footer(pdf, page_num, width)
        pdf.save()
