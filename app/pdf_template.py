from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.utils import ImageReader
from utils import getPath
from textwrap import wrap


class GeneratePDF:
    def __init__(self, title, subject_details, instructions, questions, enrollment_no, logo_path):
        self.title = title
        self.subject_details = subject_details
        self.instructions = instructions
        self.questions = questions
        self.enrollment_no = enrollment_no
        self.logo_path = logo_path

    def add_footer(self, pdf, page_num, width):
        pdf.setLineWidth(1)
        pdf.setStrokeColor(colors.HexColor("#C1C1C1"))
        pdf.line(50, 40, width - 50, 40)

        pdf.setFont("Helvetica", 10)
        pdf.setFillColor(colors.HexColor("#4A4A4A"))
        pdf.drawString(50, 25, f"Page {page_num}")

        pdf.drawRightString(width - 100, 25, "Generated by Brainy Studio")

        if self.logo_path:
            logo = ImageReader(self.logo_path)
            pdf.drawImage(logo, width - 90, 10, width=30, height=30, mask='auto')

        bookmark_title = f"Page {page_num}"
        pdf.bookmarkPage(bookmark_title)
        pdf.addOutlineEntry(bookmark_title, bookmark_title, level=0)

    def generate_pdf(self):
        pdf_file = getPath(f"data\\{self.title}_{self.subject_details["subject_date"]}.pdf", force_get=True)
        pdf = canvas.Canvas(pdf_file, pagesize=A4)
        width, height = A4

        pdf.setFont("Helvetica-Bold", 10)
        pdf.setFillColor(colors.HexColor("#4A4A4A"))
        pdf.drawString(50, height - 20, f"Enrollment No: {self.enrollment_no}")

        pdf.bookmarkPage("TitlePage")
        pdf.addOutlineEntry("Enhanced Examination Paper", "TitlePage", level=0)
        pdf.setFont("Helvetica-Bold", 24)
        pdf.setFillColor(colors.HexColor("#2E3B55"))
        pdf.drawCentredString(width / 2, height - 50, self.title)

        pdf.setLineWidth(3)
        pdf.setStrokeColor(colors.HexColor("#4CAF50"))
        pdf.line(50, height - 80, width - 50, height - 80)

        pdf.setFont("Helvetica-Bold", 12)
        pdf.setFillColor(colors.HexColor("#2E3B55"))
        pdf.drawString(50, height - 110, f"Subject Code: {self.subject_details['subject_code']}")
        pdf.drawString(width - 250, height - 110, f"Date: {self.subject_details['subject_date']}")
        pdf.setFont("Helvetica-Bold", 14)
        pdf.drawString(50, height - 130, f"Subject Name: {self.subject_details['subject_name']}")
        pdf.setFont("Helvetica-Bold", 12)
        pdf.drawString(50, height - 150, f"Time Duration: {self.subject_details['time_duration']}")
        pdf.drawString(width - 250, height - 150, f"Total Marks: {self.subject_details['total_marks']}")

        pdf.setLineWidth(1)
        pdf.setDash(3, 3)
        pdf.line(50, height - 160, width - 50, height - 160)
        pdf.setDash()

        pdf.setFont("Helvetica-Bold", 12)
        pdf.setFillColor(colors.HexColor("#2E3B55"))
        y_position = height - 180
        pdf.drawString(50, y_position, "Instructions:")

        y_position -= 15
        text_object = pdf.beginText(50, y_position)
        text_object.setFont("Helvetica", 10)
        text_object.setFillColor(colors.HexColor("#4A4A4A"))
        text_object.textLines(self.instructions)
        pdf.drawText(text_object)

        y_position = text_object.getY() - 20
        pdf.setLineWidth(1)
        pdf.setDash(3, 3)
        pdf.line(50, y_position, width - 50, y_position)
        pdf.setDash()

        page_num = 1
        question_start_y = y_position - 20

        for i, (question_text, marks, correct_option, options_list) in enumerate(self.questions):
            wrapped_question = wrap(question_text, width=85)
            question_height = len(wrapped_question) * 15
            options_height = len(options_list) * 25
            total_question_height = question_height + options_height + 40

            if question_start_y - total_question_height < 100:
                self.add_footer(pdf, page_num, width)
                pdf.showPage()
                page_num += 1
                question_start_y = height - 120

            max_text_width = width - 100
            wrapped_question = wrap(question_text, width=85)


            pdf.setFont("Helvetica-Bold", 12)
            pdf.setFillColor(colors.HexColor("#2E3B55"))
            y_offset = 0
            for line in wrapped_question:
                pdf.drawString(50, question_start_y - y_offset, line)
                y_offset += 15
            question_start_y -= y_offset

            pdf.drawRightString(width - 50, question_start_y, f"Marks: {marks}")

            pdf.setFont("Helvetica", 11)
            option_y = question_start_y - 25

            for j, option_text in enumerate(options_list):
                pdf.setStrokeColor(colors.HexColor("#2E3B55"))
                pdf.circle(70, option_y, 4)

                if j == correct_option:
                    pdf.setFillColor(colors.HexColor("#333333"))
                    pdf.circle(70, option_y, 3, stroke=0, fill=1)
                    pdf.setFillColor(colors.HexColor("#000000"))

                pdf.setFillColor(colors.HexColor("#4A4A4A"))
                pdf.drawString(90, option_y - 4, f"{option_text}")
                option_y -= 25

            question_start_y = option_y - 20

        self.add_footer(pdf, page_num, width)
        pdf.save()
